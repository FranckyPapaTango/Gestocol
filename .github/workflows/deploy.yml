# DEVOPS : CI/CD frontend + backend FastAPI
name: CI/CD Deploy Gestocol (Full stack)

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Récupérer le code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Installer Node.js (Frontend)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 3. Build frontend
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build

      # 4. Installer Python 3.11 (Backend)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 5. Installer les dépendances backend localement pour packaging
      - name: Install backend dependencies locally
        run: |
          cd backend
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      # 6. Build / package backend (tar dans /tmp)
      - name: Package backend
        run: |
          cd backend
          tar -czf /tmp/gestocol-backend.tar.gz .

      # 7. Configurer SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      # 8. Ajouter le serveur aux known_hosts
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      # 9. Déploiement frontend
      - name: Upload frontend static
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "rm -rf /var/www/gestocol/*"
          scp -r frontend/build/* ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/var/www/gestocol/

      # 10. Upload backend tar.gz
      - name: Upload backend archive
        run: |
          scp /tmp/gestocol-backend.tar.gz ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/gestocol-backend.tar.gz

      # 11. Déploiement backend + rollback + gestion venv & .env
      - name: Deploy backend
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} 'bash -s' <<'EOF'
  set -e
  
  BACKEND_DIR="/opt/gestocol/backend"
  BACKUP_DIR="/opt/gestocol/backup"
  TMP_ARCHIVE="/tmp/gestocol-backend.tar.gz"
  LOG_PATH="/opt/gestocol/backend.log"
  
  # Variables PostgreSQL depuis secrets
  POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
  POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
  POSTGRES_HOST="${{ secrets.POSTGRES_HOST }}"
  POSTGRES_PORT="${{ secrets.POSTGRES_PORT }}"
  POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
  
  echo "📦 Sauvegarde du backend actuel..."
  mkdir -p "$BACKUP_DIR"
  if [ -d "$BACKEND_DIR" ]; then
  rm -rf "$BACKUP_DIR/backup_backend"
  cp -r "$BACKEND_DIR" "$BACKUP_DIR/backup_backend"
  fi
  
  echo "🗑 Suppression de l'ancien backend..."
  rm -rf "$BACKEND_DIR"
  
  echo "📤 Déploiement du nouveau backend..."
  mkdir -p "$BACKEND_DIR"
  tar -xzf "$TMP_ARCHIVE" -C "$BACKEND_DIR"
  
  echo "🌿 Création du fichier .env"
  cat > "$BACKEND_DIR/.env" <<ENV_EOF
  POSTGRES_USER=$POSTGRES_USER
  POSTGRES_PASSWORD=$POSTGRES_PASSWORD
  POSTGRES_HOST=$POSTGRES_HOST
  POSTGRES_PORT=$POSTGRES_PORT
  POSTGRES_DB=$POSTGRES_DB
  ENV_EOF
  
  echo "🖥 Création / activation du venv et installation deps"
  python3 -m venv "$BACKEND_DIR/venv"
  source "$BACKEND_DIR/venv/bin/activate"
  pip install --upgrade pip
  pip install -r "$BACKEND_DIR/requirements.txt"
  
  echo "🚀 Lancement du backend FastAPI avec uvicorn..."
  pkill -f "uvicorn.*gestocol" || true
  if ! (nohup uvicorn main:app --host 0.0.0.0 --port 8083 > "$LOG_PATH" 2>&1 & sleep 5 && pgrep -f "uvicorn.*gestocol" > /dev/null); then
  echo "❌ Échec du démarrage du backend, rollback..."
  if [ -d "$BACKUP_DIR/backup_backend" ]; then
  echo "⚠️ Rollback du backend précédent..."
  rm -rf "$BACKEND_DIR"
  mv "$BACKUP_DIR/backup_backend" "$BACKEND_DIR"
  nohup uvicorn main:app --host 0.0.0.0 --port 8083 > "$LOG_PATH" 2>&1 &
  echo "✅ Backend rollback lancé en nohup. Logs -> $LOG_PATH"
  fi
  else
  echo "✅ Backend lancé correctement."
  fi
  EOF
